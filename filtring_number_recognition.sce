 /*
* Object recognition with scilab
*@author ghouibi ghassen
*@date April 2019
*/

path="C:\Users\XYZ\Desktop\";
f=figure('figure_position',[190,50],...
'figure_size',[1050,650],...
'auto_resize','on',...
'background',[2],...
'figure_name','Projet Traitement d images de signal',...
'dockable','off',...
'infobar_visible','off',...
'toolbar_visible','off',...
'menubar_visible','off',...
'default_axes','on',...
'visible','off');

handles.dummy = 0;

//Original
handles.Original=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.001,0.88,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Original version',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Original',...
'Callback','Original(handles)')

//Mirror
handles.Mirror=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.001,0.78,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Mirror',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Mirror',...
'Callback','Mirror(handles)')


//blurring filter
handles.blurring=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[100],...
'Min',[0],...
'Position',[0.001,0.68,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Blurring',...
'Style','slider',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Flou',...
'Callback','Blurring(handles)')


//Grey Filter
handles.greyFilter=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.001,0.58,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Grey Filter',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Load',...
'Callback','GreyFilter(handles)')

//Sobel
handles.SobelFilter=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.001,0.48,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Sobel Filter',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Load',...
'Callback','Sobel(handles)')

//Laplacian
handles.Laplacian=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.001,0.38,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Laplacian Filter',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Laplacian',...
'Callback','Laplacian(handles)')

//Zomm In 
handles.zoomIn=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.001,0.28,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Zoom In',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Zoom',...
'Callback','ZoomIn(handles)')

//Zomm Out 
handles.zoomOut=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.001,0.18,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Zoom Out',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Zoom',...
'Callback','ZoomOut(handles)')

//Save IMG
handles.saveIMG=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.001,0.08,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Save IMG',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Save',...
'Callback','SaveIMG(handles)')
/*------------------------------Right button-----------------------------*/

//Loading Image
handles.Load=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.83,0.88,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Load Image',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Load',...
'Callback','LoadIMG(handles)')

//Take Photo
handles.takePhoto=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.83,0.78,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Take Photo',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Webcam',...
'Callback','TakePhoto(handles)')


//Detect object
handles.ObjectDetection=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.83,0.68,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Object Detection',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Object',...
'Callback','ObjectDetect(handles)')

//Number Detection
handles.numberDetection=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.83,0.58,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Number Detection',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Object',...
'Callback','NumberDetection(handles)')


//CNN init
handles.train=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.83,0.48,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Train',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Train',...
'Callback','Train(handles)')

//live webcam
handles.LiveWebCam=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.83,0.38,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Live Webcam',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','LiveWebcam',...
'Callback','LiveWebcam(handles)')


//Close
handles.close=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.83,0.28,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Close Webcam',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Close',...
'Callback','Close(handles)')




//Clear
handles.clear=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.83,0.18,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Clear',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Clear',...
'Callback','Clear(handles)')


//Help
handles.Help=uicontrol(f,...
'unit','normalized',...
'BackgroundColor',[-1,-1,-1],...
'Enable','on',...
'FontAngle','normal',...
'FontName','Tahoma',...
'FontSize',[11],...
'FontUnits','points',...
'FontWeight','normal',...
'ForegroundColor',[-1,-1,-1],...
'HorizontalAlignment','center',...
'ListboxTop',[],...
'Max',[1],...
'Min',[0],...
'Position',[0.83,0.08,0.13,0.07],...
'Relief','default',...
'SliderStep',[0.01,0.01],...
'String','Help',...
'Style','pushbutton',...
'Value',[0],...
'VerticalAlignment','middle',...
'Visible','on',...
'Tag','Help',...
'Callback','Help(handles)')
handles.Axes1= newaxes();
handles.Axes1.margins = [ 0 0 0 0];
handles.Axes1.axes_bounds = [0.15,0.015,0.65,0.95];
handles.Axes1.auto_clear = 'on';
f.visible = "on";



/*--------------right buttons function-----------------------------*/
/*
* Getting the original version of picture
*/
function Original(handles)
    image = handles.OriginalImage;
    imshow(image);
    handles.CopyImage= image;
    handles = resume(handles);
endfunction
/*
* Making mirror effet
*/
function Mirror(handles)
    test=~handles.MirrorImage;
    if test then
        image = handles.CopyImage(:,$:-1:1,:);
    else
        image = handles.OriginalImage;
    end
    imshow(image);
    handles.MirrorImage=test;
    handles.CopyImage = image;
    handles = resume(handles);
endfunction

/*
* Flotting the picture
*/
function Blurring(handles)
    image = handles.OriginalImage;
    x=round(get(handles.blurring,'value')/10);
    disp(x);
    if x==0 then
        image=handles.OriginalImage;
    else
        filter = fspecial('average',x);
        image = imfilter(image, filter);
    end

    imshow(image);
    handles.CopyImage = image;
    handles = resume(handles);
    
endfunction
/*
* Applicate Grey filter
*/
function GreyFilter(handles)
    image = rgb2gray(handles.CopyImage);
    imshow(image);
    handles.CopyImage = image;
    handles = resume(handles);
endfunction
/*
* Applicate Sobel filter
*/
function Sobel(handles)
    image = handles.CopyImage;
    filter = fspecial('sobel'); 
    image = imfilter(image, filter);
    imshow(image);
    handles.CopyImage = image;
    handles = resume(handles);
endfunction

/*
* Applicate Laplacian filter
*/
function Laplacian(handles)
    image = handles.CopyImage;
    filter = fspecial('laplacian',0);
    image = filter2(image,filter);
    image = im2uint8(image)
    imshow(image);  
    handles.CopyImage = image ;
    handles = resume(handles);
endfunction

/*
* This function zoom in the image with crop in the zone choosed by the user
*/
function ZoomIn(handles)
    handles.BeforeZoom=handles.CopyImage;
    image = handles.CopyImage;
    rect1=rubberbox();
    imheight=size(image,"r");

    rect1(2)=imheight-rect1(2);   
    zoomed=imcrop(image,rect1);
    imshow(zoomed);
    height=size(zoomed,"r");
    handles.CopyImage=zoomed;
    handles = resume(handles);

endfunction

/*
* This function zoom out the image with crop in the zone choosed by the user
*/
function ZoomOut(handles)
    imshow(handles.BeforeZoom);
    if handles.CopyImage==handles.BeforeZoom then
        handles.BeforeZoom=handles.OriginalImage;
    end
    handles.CopyImage=handles.BeforeZoom;
    handles = resume(handles);
endfunction

/*
*This function save current image shown in the canvas 
*/
function SaveIMG(handles)
   imageTosave=handles.CopyImage;
   imshow(imageTosave);
   [fileName,filePath]=uiputfile(["*.jpeg"; "*.png"; "*.jpg"]);
   fileName=fullfile(filePath,fileName);
   imwrite(imageTosave,string(fileName+".jpg"));
endfunction

/*--------------right buttons function-----------------------------*/

/*
* This function load a new image and display it
*/
function LoadIMG(handles)
    filePath = uigetfile('*'); 
    image = imread(filePath);
    imshow(image);
    handles.OriginalImage = image;
    handles.CopyImage     = image;
    handles.MirrorImage   =0;
    handles = resume(handles);
endfunction

/*
*This function allow to user to take photo with webcam
*/
function TakePhoto(handles)
    cam = camopen(0);
    image = camread(cam); //get a frame
    imshow(image);
    camcloseall();
    handles.OriginalImage = image;
    handles.CopyImage     = image;
    handles.MirrorImage   = 0;
    handles = resume(handles);
endfunction

/*
* This function detect white object in a image
    @adapted from scilab/help
*/
function ObjectDetect(handles)
    image=handles.CopyImage;
    imshow(image);
    
    winId=progressionbar('Object detection in progress');
    realtimeinit(0.3);
    for j=0:0.1:1,
      realtime(3*j);
      progressionbar(winId);
    end
    close(winId);

    response=x_dialog('Want to see progress ? Yes Or No ',['Yes'])
    disp(response);
    
    Image = rgb2gray(image);
    //Invervet Image to black to white & white to black
    InvertedImage = uint8(255 * ones(size(Image,1), size(Image,2))) - Image;
    Threshold=100;

    level=Threshold/255;
    if response=='Yes' then
        imshow(InvertedImage);
    end
    LogicalImage = im2bw(InvertedImage, level);
    
     if response=='Yes' then
        imshow(LogicalImage);
    end
    //Create strcut element
    
    StructureElement = imcreatese('rect',50,51);
    FilteredLogicalImage = imclose(LogicalImage,StructureElement)
    
    [ObjectImage,n] = imlabel(FilteredLogicalImage);
    //getting the binding box
    [Area, BB] = imblobprop(ObjectImage);
    f4=scf(4);
    f4.name='Result';
    imshow(image);
    imrects(BB,[0 255 0]);
    handles = resume(handles);

endfunction

/*
* This function detect numbers in a image
*/
function NumberDetection(handles)
    imagePicked=handles.OriginalImage;
    Image = rgb2gray(imagePicked);
    imshow(Image);
    
    //Invervet Image to black to white & white to black
    InvertedImage = uint8(255 * ones(size(Image,1), size(Image,2))) - Image;
    //imshow(InvertedImage);
    a=0;
    fd=mopen(path+'Object-recognition\numbers\0\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    disp(number);
    
    for i = 0:number
       image=imread(path+'Object-recognition\numbers\0\0-'+string(i)+'.jpg');
       imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
         trained=imread(path+'Object-recognition\numbers\train\train.jpg');
        if trained == image then
        messagebox("This is 0");
        a=1;
        end
    end
    fd=mopen(path+'Object-recognition\numbers\1\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    disp(number);
    for i = 0:number
       image=imread(path+'Object-recognition\numbers\1\1-'+string(i)+'.jpg');
       imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
         trained=imread(path+'Object-recognition\numbers\train\train.jpg');
        if trained == image then
        messagebox("This is 1");
        a=1;
        end
    end
    
    fd=mopen(path+'Object-recognition\numbers\2\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    disp(number);
    for i = 1:number
         image=imread(path+'Object-recognition\numbers\2\2-'+string(i)+'.jpg');
         imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
         trained=imread(path+'Object-recognition\numbers\train\train.jpg');
         if trained == image then
             messagebox("This is 2 found");
             a=1;
        end
    end
    
    fd=mopen(path+'Object-recognition\numbers\3\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    disp(number);
    
    for i = 0:number
        image=imread(path+'Object-recognition\numbers\3\3-'+string(i)+'.jpg');
        imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
        trained=imread(path+'Object-recognition\numbers\train\train.jpg');
        if trained == image then
            messagebox("This is 3 ");
            a=1;
        end
    end
    
    
    
    fd=mopen(path+'Object-recognition\numbers\4\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    disp(number);
    
    for i = 0:number
        image=imread(path+'Object-recognition\numbers\4\4-'+string(i)+'.jpg');
        imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
        trained=imread(path+'Object-recognition\numbers\train\train.jpg');
        if trained == image then
            messagebox("This is 4");
            a=1;
        end
    end
    
    fd=mopen(path+'Object-recognition\numbers\5\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    disp(number);
    
    for i = 0:number
        image=imread(path+'Object-recognition\numbers\5\5-'+string(i)+'.jpg');
        imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
        trained=imread(path+'Object-recognition\numbers\train\train.jpg');
        if trained == image then
            messagebox("This is 5");
            a=1;
        end
    end
    
    fd=mopen(path+'Object-recognition\numbers\6\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    disp(number);
    for i = 1:number
        image=imread(path+'Object-recognition\numbers\6\6-'+string(i)+'.jpg');
        imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
        trained=imread(path+'Object-recognition\numbers\train\train.jpg');
        if trained == image then
            messagebox("This is 6");
            a=1
        end
    end
    
    fd=mopen(path+'Object-recognition\numbers\7\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    disp(number);
    for i = 1:number
        image=imread(path+'Object-recognition\numbers\7\7-'+string(i)+'.jpg');
        imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
        trained=imread(path+'Object-recognition\numbers\train\train.jpg');
        if trained == image then
            messagebox("This 7");
            a=1;
        end
    end
    
    fd=mopen(path+'Object-recognition\numbers\8\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    
    for i = 1:number
        image=imread(path+'Object-recognition\numbers\8\8-'+string(i)+'.jpg');
        imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
        trained=imread(path+'Object-recognition\numbers\train\train.jpg');
        if imagePicked == image then
            messagebox("This is 8");
            a=1;
        end
    end
    
    fd=mopen(path+'Object-recognition\numbers\9\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    
    for i = 1:number
        image=imread(path+'Object-recognition\numbers\9\9-'+string(i)+'.jpg');
        imwrite(InvertedImage,string(path+"Object-recognition\numbers\train\train.jpg"));
        trained=imread(path+'Object-recognition\numbers\train\train.jpg');
        if trained == image then
            messagebox("This is 9");
            a=1;
        end
    end
    
    if a==0 then
        messagebox("I don t have this in my data base and i can t figure out the number please use Train ");
    end
    
    handles = resume(handles);
endfunction

/*
* Training DATA
*/
function Train(handles)
    image=handles.OriginalImage;
    Image = rgb2gray(image);
    //Invervet Image color
    InvertedImage = uint8(255 * ones(size(Image,1), size(Image,2))) - Image;
    imshow(InvertedImage);
    response=x_dialog('which number is this ?',['']);
    disp(response);
    
    fd=mopen(path+'Object-recognition\numbers\'+response+'\numbers.txt','r');
    x=mgetl(fd,10);
    number=strtod(x);
    mclose(fd);
    
    fd=mopen(path+'Object-recognition\numbers\'+response+'\numbers.txt','w');
    counter=number+1;
    mputstr(string(counter));
    mclose(fd);
    
    imwrite(InvertedImage,string(path+'Object-recognition\numbers\'+response+'\'+response+'-'+string(counter)+".jpg"));
    //handles.CopyImage=image;
    imshow(image);
    handles=resume(handles);
endfunction
/*
*This function open a live webcam streaming
*/
function LiveWebcam(handles)
    cam = camopen(0)
    for cnt = 1:100
        image = camread(cam);
        imshow(image);
    end
    handles.CopyImage = image;
    handles = resume(handles);
endfunction

/*
* This function close webcam the program
*/
function Close(handles)
    camcloseall();
    handles = resume(handles);
endfunction
/*
*This function juste load an white image background
*/
function Clear(handles)
    clearing=imread(path+'Object-recognition\reset.jpg');
    imshow(clearing);
    handles.CopyImage=clearing;
    handles.OriginalImage=clearing;
    handles=resume(handles);
endfunction
/*
* This function display how this program work
*/
function Help(handles) 
    messagebox("Hello users button on the right are for filter picture     the right button for picture recognition","Help", ["OK"]);
endfunction
